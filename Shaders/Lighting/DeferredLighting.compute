// Definitions
//--------------------------------------------------------------------------------------------------

#pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal
// Note that DanbaidongRP don't care with switch platform(which need to handle with PLATFORM_LANE_COUNT).

// Kernel max num is SHADINGMODELS_MAX_MODELS_NUM
#pragma kernel DeferredClassifyTiles        DEFERRED_CLASSIFY_TILES
#pragma kernel DeferredLighting0            DEFERRED_LIGHTING           DEFERRED_COMPUTE_ENTRY=DeferredLighting0        DEFERRED_LIT
#pragma kernel DeferredLighting1            DEFERRED_LIGHTING           DEFERRED_COMPUTE_ENTRY=DeferredLighting1        DEFERRED_SIMPLELIT
#pragma kernel DeferredLighting2            DEFERRED_LIGHTING           DEFERRED_COMPUTE_ENTRY=DeferredLighting2        DEFERRED_CHARACTER

#pragma multi_compile _ _MAIN_LIGHT_SHADOWS _MAIN_LIGHT_SHADOWS_CASCADE _MAIN_LIGHT_SHADOWS_SCREEN
#pragma multi_compile _ _PEROBJECT_SCREEN_SPACE_SHADOW
#pragma multi_compile _ _GBUFFER_NORMALS_OCT
//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Shaders/Utils/Deferred.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Runtime/Lights/GPULights.cs.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/Runtime/Lighting/ShadingModels.cs.hlsl"

#if defined(DEFERRED_CLASSIFY_TILES)
#elif defined(DEFERRED_LIGHTING)
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/Shadows.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/PerObjectShadows.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/DeclareDepthTexture.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/PreIntegratedFGD.hlsl"
#include "Packages/com.unity.render-pipelines.danbaidong/ShaderLibrary/GPUCulledLights.hlsl"
#endif
//--------------------------------------------------------------------------------------------------
// Inputs & outputs
//--------------------------------------------------------------------------------------------------

#if defined(DEFERRED_CLASSIFY_TILES)
Texture2D<uint2> _StencilTexture;

RWBuffer<uint> g_DispatchIndirectBuffer;
RWStructuredBuffer<uint> g_TileList;
#elif defined(DEFERRED_LIGHTING)

StructuredBuffer<uint> g_TileList;
Texture2D<uint2> _StencilTexture;
TEXTURE2D_X_FLOAT(_GBuffer0);
TEXTURE2D_X_FLOAT(_GBuffer1);
TEXTURE2D_X_FLOAT(_GBuffer2);

RWTexture2D<float4> _LightingTexture;
#endif

//--------------------------------------------------------------------------------------------------
// Helpers
//--------------------------------------------------------------------------------------------------

#define DEFERRED_LIGHTING_TILE_SIZE (16)
#define DEFERRED_LIGHTING_GROUP_SIZE (DEFERRED_LIGHTING_TILE_SIZE / 2)
#define DEFERRED_LIGHTING_THREADS   (64)
#define HasShadingModel(stencilVal) ((stencilVal >> SHADINGMODELS_USER_MASK_BITS) > 0)

uint2 DecodeTileIndex(uint encoded)
{
    return uint2((encoded >> TILE_INDEX_SHIFT_X) & TILE_INDEX_MASK, (encoded >> TILE_INDEX_SHIFT_Y) & TILE_INDEX_MASK);
}

uint DecodeEyeIndex(uint encoded)
{
    encoded >> TILE_INDEX_SHIFT_EYE;
}

uint EncodeTileIndex(uint2 tileID)
{
    return (unity_StereoEyeIndex << TILE_INDEX_SHIFT_EYE) | (tileID.y << TILE_INDEX_SHIFT_Y) | (tileID.x << TILE_INDEX_SHIFT_X);
}

int ShadingModelToIndex(uint stencilVal)
{
    // // This will map 0010_0000 to index 2.
    // stencilVal = (stencilVal) >> SHADINGMODELS_USER_MASK_BITS;
    // // Need remove defalut value 0.
    // return stencilVal - 1;

    if (stencilVal == SHADINGMODELS_LIT)
    {
        return 0;
    }
    else if (stencilVal == SHADINGMODELS_SIMPLE_LIT)
    {
        return 1;
    }
    else if (stencilVal == SHADINGMODELS_CHARACTER)
    {
        return 2;
    }

    return 0;
}

uint IndexToShadingModel(int index)
{
    if (index == 0)
    {
        return SHADINGMODELS_LIT;
    }
    else if (index == 1)
    {
        return SHADINGMODELS_SIMPLE_LIT;
    }
    else if (index == 2)
    {
        return SHADINGMODELS_CHARACTER;
    }

    return SHADINGMODELS_LIT;
}

#if defined(DEFERRED_CLASSIFY_TILES)


#elif defined(DEFERRED_LIGHTING)

int  _ShadingModelIndex;
int2 _TilesNum;

struct DeferredLightingOutput
{
    float3 diffuseLighting;
    float3 specularLighting;
};

void InitializeDispatchThreadIdFromTileList(uint groupId, uint2 gThreadId, out uint2 tileCoord,out uint2 dThreadId)
{
    uint  encodedTileIndex = g_TileList[_ShadingModelIndex * _TilesNum.x * _TilesNum.y + (groupId / 4)];
    tileCoord = DecodeTileIndex(encodedTileIndex);
    dThreadId = tileCoord * DEFERRED_LIGHTING_TILE_SIZE
              + uint2(groupId & 1, (groupId >> 1) & 1) * DEFERRED_LIGHTING_GROUP_SIZE
              + gThreadId;
}


#endif

//--------------------------------------------------------------------------------------------------
// Implementation
//--------------------------------------------------------------------------------------------------

#if defined(DEFERRED_CLASSIFY_TILES)

groupshared uint gs_ShadingModelFlags[SHADINGMODELS_CUR_MODELS_NUM];

// Dispatch size is 16*16 (tile size), each group has 64 threads, each thread handle 4 piexels.
[numthreads(DEFERRED_LIGHTING_THREADS, 1, 1)]
void DeferredClassifyTiles(uint3 dispatchThreadId : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
    uint2 tileID = groupID.xy;

    uint2 screenSize = _ScreenSize.xy;
    uint tilesNum;
    tilesNum = (screenSize.x + DEFERRED_LIGHTING_TILE_SIZE - 1) / DEFERRED_LIGHTING_TILE_SIZE;
    tilesNum *= (screenSize.y + DEFERRED_LIGHTING_TILE_SIZE - 1) / DEFERRED_LIGHTING_TILE_SIZE;


    uint2 coordBoundLL = DEFERRED_LIGHTING_TILE_SIZE * tileID;
    uint shadingModelFlags[SHADINGMODELS_CUR_MODELS_NUM] = (uint[SHADINGMODELS_CUR_MODELS_NUM])0;

    // Per tile Initialize
    if (groupIndex < SHADINGMODELS_CUR_MODELS_NUM)
    {
        gs_ShadingModelFlags[groupIndex] = 0;
    }
    GroupMemoryBarrierWithGroupSync();


    // Sampling stencil get shading models write to curr thread shadingModelFlags[]
    UNITY_UNROLL
    for (int i = 0; i < 4; i++)
    {
        int idx = i * DEFERRED_LIGHTING_THREADS + groupIndex;
        uint2 uCrd = min(uint2(coordBoundLL.x + (idx & 0xf), coordBoundLL.y + (idx >> 4)), uint2(screenSize.x - 1, screenSize.y - 1));

        uint stencilVal = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, uCrd));


        int flagIndex = ShadingModelToIndex(stencilVal);
        shadingModelFlags[flagIndex] |= (HasShadingModel(stencilVal) ? 1 : 0);
    }



    // Gather per tile shading models
    UNITY_UNROLL
    for (int j = 0; j < SHADINGMODELS_CUR_MODELS_NUM; j++)
    {
        if (shadingModelFlags[j] > 0)
        {
            InterlockedOr(gs_ShadingModelFlags[j], shadingModelFlags[j]);
        }
    }
    GroupMemoryBarrierWithGroupSync();


    // Write per tile data.
    if (groupIndex < SHADINGMODELS_CUR_MODELS_NUM)
    {
        
        if (gs_ShadingModelFlags[groupIndex] > 0)
        {

            uint tileOffset = 0;
            uint prevGroupCnt;
            // We are filling up an indirect argument buffer for DispatchIndirect.
            // The buffer contains {groupCntX, groupCntY, groupCntZ} = {groupCnt, 0, 0}.
            // Current thread contorls 4 pixels.
            InterlockedAdd(g_DispatchIndirectBuffer[groupIndex * 3], 4, prevGroupCnt);
            tileOffset = prevGroupCnt / 4; // 4x 8x8 groups per a 16x16 tile
            g_TileList[groupIndex * tilesNum + tileOffset] = EncodeTileIndex(tileID.xy);
        }

    }

}


#elif defined(DEFERRED_LIGHTING)

// struct PositionInputs
// {
//     float3 positionWS;  // World space position (could be camera-relative)
//     float2 positionNDC; // Normalized screen coordinates within the viewport    : [0, 1) (with the half-pixel offset)
//     uint2  positionSS;  // Screen space pixel coordinates                       : [0, NumPixels)
//     uint2  tileCoord;   // Screen tile coordinates                              : [0, NumTiles)
//     float  deviceDepth; // Depth from the depth buffer                          : [0, 1] (typically reversed)
//     float  linearDepth; // View space Z coordinate                              : [Near, Far]
// };
// struct BRDFData
// {
//     float3 albedo;
//     float3 diffuse;
//     float3 specular;
//     float reflectivity;
//     float perceptualRoughness;
//     float roughness;
//     float roughness2;
//     float grazingTerm;

//     // We save some light invariant BRDF terms so we don't have to recompute
//     // them in the light loop. Take a look at DirectBRDF function for detailed explaination.
//     float normalizationTerm;     // roughness * 4.0 + 2.0
//     float roughness2MinusOne;    // roughness^2 - 1.0
// };
// struct DirectionalLightData
// {
//     float3 lightPosWS;
//     uint lightLayerMask;
//     float3 lightColor;
//     int lightFlags;
//     float4 lightAttenuation;
//     float3 lightDirection;
//     int shadowlightIndex;
// };

DeferredLightingOutput DeferredLit(PositionInputs posInput, float4 gbuffer0, float4 gbuffer1, float4 gbuffer2)
{

    DeferredLightingOutput lightOutput;
    ZERO_INITIALIZE(DeferredLightingOutput, lightOutput);

    // Unpack GBuffer informations. Init datas.
    // See UnityGBuffer for more information.
    // GBuffer0: diffuse           diffuse         diffuse         materialFlags   (sRGB rendertarget)
    // GBuffer1: metallic/specular specular        specular        occlusion
    // GBuffer2: encoded-normal    encoded-normal  encoded-normal  smoothness
    float3 positionWS       = posInput.positionWS;
    float3 normalWS         = normalize(UnpackNormal(gbuffer2.xyz));
    float3 viewDirWS        = GetWorldSpaceNormalizeViewDir(positionWS);

    float3 albedo          = gbuffer0.rgb;
    float  metallic        = MetallicFromReflectivity(gbuffer1.r); // TODO: handle with Specular Metallic and setup.
    float  occlusion       = gbuffer1.a;
    float  smoothness      = gbuffer2.a;
    uint   materialFlags   = UnpackMaterialFlags(gbuffer0.a);

    float perceptualRoughness = PerceptualSmoothnessToPerceptualRoughness(smoothness);
    float roughness           = max(PerceptualRoughnessToRoughness(perceptualRoughness), HALF_MIN_SQRT); // TODO: We need to change this with Angular Diameter, which result in minRoughness.
    float roughness2          = max(roughness * roughness, HALF_MIN);
    
    float3 diffuseColor = ComputeDiffuseColor(albedo, metallic);
    float3 fresnel0 = ComputeFresnel0(albedo, metallic, DEFAULT_SPECULAR_VALUE);


    float  NdotV = dot(normalWS, viewDirWS);
    float  clampedNdotV = ClampNdotV(NdotV);
    float3 specularFGD;
    float  diffuseFGD;
    float  reflectivity;
    GetPreIntegratedFGDGGXAndDisneyDiffuse(clampedNdotV, perceptualRoughness, fresnel0, specularFGD, diffuseFGD, reflectivity);
    float energyCompensation = 1.0 / reflectivity - 1.0;

    float3 directDiffuse = 0;
    float3 directSpecular = 0;
    float3 indirectDiffuse = 0;
    float3 indirectSpecular = 0;

    // Shading

    // Accumulate Direct (Directional Lights, Punctual Lights, TODO: Area Lights)
    uint dirLightIndex = 0;
    bool materialReceiveShadowsOff = (materialFlags & kMaterialFlagReceiveShadowsOff) != 0;
    for (dirLightIndex = 0; dirLightIndex < _DirectionalLightCount; dirLightIndex++)
    {
        // TODO: LightLayer
        DirectionalLightData dirLight = g_DirectionalLightDatas[dirLightIndex];
        float3 lightDirWS = dirLight.lightDirection;
        float NdotL = dot(normalWS, lightDirWS);
        
        float clampedNdotL = saturate(NdotL);

        float LdotV, NdotH, LdotH, invLenLV;
        GetBSDFAngle(viewDirWS, lightDirWS, NdotL, NdotV, LdotV, NdotH, LdotH, invLenLV);


        float3 F = F_Schlick(fresnel0, LdotH);
        float DV = DV_SmithJointGGX(NdotH, abs(NdotL), clampedNdotV, roughness);
        float3 specTerm = F * DV;
        float diffTerm = DisneyDiffuse(clampedNdotV, abs(NdotL), LdotV, perceptualRoughness);

        diffTerm *= clampedNdotL;
        specTerm *= clampedNdotL;

        directDiffuse += diffuseColor * diffTerm * dirLight.lightColor;
        directSpecular += specTerm * dirLight.lightColor;
    }
    // Shadows, current only main light shadow.
    // TODO: add different direct light shadowmap
    float shadowAttenuation = LoadScreenSpaceShadowmap(posInput.positionSS);
    #ifdef _PEROBJECT_SCREEN_SPACE_SHADOW
    shadowAttenuation = min(shadowAttenuation, LoadPerObjectScreenSpaceShadowmap(posInput.positionSS));
    #endif
    directDiffuse *= shadowAttenuation;







    // Accumulate Indirect (Reflection probe, ScreenSpace Reflection/Refraction)
    // Reflection / Refraction hierarchy is
    //  1. Screen Space Refraction / Reflection
    //  2. Environment Reflection / Refraction
    //  3. Sky Reflection / Refraction

    float3 SHColor = SampleSH(normalWS);
    indirectDiffuse += diffuseFGD * SHColor * diffuseColor;
    // TODO: ModifyBakedDiffuseLighting Function


    float3 reflectDirWS = reflect(-viewDirWS, normalWS);
    float3 envReflection = GlossyEnvironmentReflection(reflectDirWS, perceptualRoughness, occlusion);// TODO: reflection is so different from HDRP
    indirectSpecular += specularFGD * envReflection;

    // Post evaluate indirect diffuse or energy.



    lightOutput.diffuseLighting = directDiffuse + indirectDiffuse;
    lightOutput.specularLighting = directSpecular + indirectSpecular;
    lightOutput.specularLighting *= 1.0 + fresnel0 * energyCompensation;


    return lightOutput;
}

DeferredLightingOutput DeferredSimpleLit(PositionInputs posInput, float4 gbuffer0, float4 gbuffer1, float4 gbuffer2)
{
    DeferredLightingOutput lightOutput;
    ZERO_INITIALIZE(DeferredLightingOutput, lightOutput);

    BRDFData brdfData = BRDFDataFromGbuffer(gbuffer0, gbuffer1, gbuffer2);

    lightOutput.diffuseLighting = brdfData.albedo;

    return lightOutput;
}

DeferredLightingOutput DeferredCharacter(PositionInputs posInput, float4 gbuffer0, float4 gbuffer1, float4 gbuffer2)
{
    DeferredLightingOutput lightOutput;
    ZERO_INITIALIZE(DeferredLightingOutput, lightOutput);

    BRDFData brdfData = BRDFDataFromGbuffer(gbuffer0, gbuffer1, gbuffer2);

    lightOutput.diffuseLighting = brdfData.albedo;

    return lightOutput;
}


DeferredLightingOutput DeferredShading(PositionInputs posInput, float4 gbuffer0, float4 gbuffer1, float4 gbuffer2)
{
#if defined(DEFERRED_LIT)
    return DeferredLit(posInput, gbuffer0, gbuffer1, gbuffer2);
#elif defined(DEFERRED_SIMPLELIT)
    return DeferredSimpleLit(posInput, gbuffer0, gbuffer1, gbuffer2);
#elif defined(DEFERRED_CHARACTER)
    return DeferredCharacter(posInput, gbuffer0, gbuffer1, gbuffer2);
#endif
}


[numthreads(DEFERRED_LIGHTING_GROUP_SIZE, DEFERRED_LIGHTING_GROUP_SIZE, 1)]
void DEFERRED_COMPUTE_ENTRY(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint groupId : SV_GroupID)
{
    uint2 coordSS;
    uint2 tileCoord;
    InitializeDispatchThreadIdFromTileList(groupId, groupThreadId, tileCoord, coordSS);

    // (0) Check valid first.
    // Reject the sky/background
    float depth = LoadSceneDepth(coordSS);
    if (depth == UNITY_RAW_FAR_CLIP_VALUE)
    {
        return;
    }
    // Reject dismatch stencil
    uint stencilVal = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, coordSS.xy));
    uint targetShadingModel = IndexToShadingModel(_ShadingModelIndex);
    if (stencilVal != targetShadingModel)
    {
        return;
    }

    PositionInputs posInput = GetPositionInput(coordSS.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, tileCoord);

    float4 gbuffer0 = LOAD_TEXTURE2D_X(_GBuffer0, coordSS.xy);
    float4 gbuffer1 = LOAD_TEXTURE2D_X(_GBuffer1, coordSS.xy);
    float4 gbuffer2 = LOAD_TEXTURE2D_X(_GBuffer2, coordSS.xy);


    DeferredLightingOutput lightOutput = DeferredShading(posInput, gbuffer0, gbuffer1, gbuffer2);


    float3 diffuseLighting = lightOutput.diffuseLighting;
    float3 specularLighting = lightOutput.specularLighting;

    _LightingTexture[coordSS] = float4(diffuseLighting + specularLighting, 1.0);
}

#endif
